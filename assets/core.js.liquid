/* *********************************************************
 * Add all site functions here 
 * and add them to both the scripts.js and editor.js files
 * - Only init barba on front-end script (not editor.js)
 *   so be sure to add any new functionality to both files
 * ********************************************************* */

// Sitewide Init Functions
initCartDrawer();
initNavigation();

/* ***********************
 * Sitewide Functions
 * *********************** */
function initNavigation() {
  // Enable sticky nav
  if (document.querySelector('.site-header').classList.contains('is-sticky')) {
    ScrollTrigger.create({
      trigger: ".site-header",
      pin: ".site-header",
      start: "top",
      end: 99999,
      // markers: true,
    });
  }
};

function initCartDrawer() {
  // Opens Cart
  document.querySelector('.js-open-cart').addEventListener('click', function(e) {
    e.preventDefault();
    gsap.to('.cart-drawer', 0.35, {autoAlpha: 1, opacity: 1});
  });

  // Closes Cart
  document.querySelector('.js-close-cart').addEventListener('click', function(e) {
    e.preventDefault();
    gsap.to('.cart-drawer', 0.35, {autoAlpha: 0, opacity: 0});
  });

  // Removes item from cart drawer list (WIP)
};

// Allows WP Links to operate normally
// document.querySelectorAll("#wpadminbar a").forEach(item=>item.setAttribute('data-barba-prevent','self'));

/* ********************************
 * Pagewide Init Functions
 * ******************************** */
var initSingleProduct = function() {
  console.log('on product page');
  // controls for quantity sliders
  bindQuantityCount();
  bindVariantOptions();

  bindGalleryControls();
};

var initCartPage = function() {
  console.log('on cart page');
  // controls for quantity sliders
  // bindQuantityCount();
  // bindVariantOptions();

  bindCartControls();
};

var initContactPage = function() {
  console.log('on contact page');
};

var initCollectionPage = function() {
  console.log('on collection page');

  Shopify.queryParams = {};

  // Preserve existing query parameters
  if (location.search.length) {
      var params = location.search.substr(1).split('&');

      for (var i = 0; i < params.length; i++) {
        var keyValue = params[i].split('=');

        if (keyValue.length) {
          Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
        }
      }
  }

  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;

    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
};

/* ********************************
 * Single Purpose Functions
 * ******************************** */
var bindQuantityCount = function() {
    console.log('bindQuantityCount');
    const addButtons = document.querySelectorAll('.js-add');
    addButtons.forEach(function (addButton) {
      addButton.addEventListener('click', function () {
        const th = this.closest('.sp-option').querySelector('.quantity__input');
        th.value = parseInt(th.value) + 1;
      });
    });

    const subButtons = document.querySelectorAll('.js-sub');
    subButtons.forEach(function (subButton) {
      subButton.addEventListener('click', function () {
        const th = this.closest('.sp-option').querySelector('.quantity__input');
        if (parseInt(th.value) > 1) th.value = parseInt(th.value) - 1;
      });
    });
};

var bindVariantOptions = function() {
  var productURL = document.querySelector('.single-product').dataset.producturl;

  fetch(productURL + '.js')
  .then(response => response.json())
  .then(product => {
    // Your code that uses the product data goes here
    // console.log(product);
    document.querySelectorAll('.sp-option input[type="radio"]').forEach(radio => {
      radio.addEventListener('change', () => {
        // find selected options
        var selectedOptions = [];

        document.querySelectorAll('.sp-option input[type="radio"]:checked').forEach(radio => {
          selectedOptions.push(radio.value)
        });

        // finding matched variant
        var matchedVariant = product.variants.find(variant => {
          var pass = true;

          for (var i = 0; i < selectedOptions.length; i++) {
            if (selectedOptions.indexOf(variant.options[i]) === -1) {
              pass = false;
              break;
            }
          }

          return pass;
        })

        console.log('new product', matchedVariant);

        // change hidden input
        document.querySelector('#productId').value = matchedVariant.id;

        // change url
        var url = new URLParse(window.location.href, true);
        url.query.variant = matchedVariant.id;
        window.history.replaceState(null, null, url.toString());

        // change price
        const format = document.querySelector('[data-moneyformat]').getAttribute('data-moneyformat');

        document.querySelector('.sp-price').textContent = formatMoney(matchedVariant.price, format);
        document.querySelector('.sp-compare-price').textContent = formatMoney(matchedVariant.compare_at_price, format);

        // toggle price classes
        matchedVariant.compare_at_price > matchedVariant.price ? 
          document.querySelector('.sp-compare-price').classList.remove('hidden') : 
          document.querySelector('.sp-compare-price').classList.add('hidden')

        // change image
        if (matchedVariant.featured_image) {
          document.querySelector('#productImage').setAttribute('src', matchedVariant.featured_image.src);
          document.querySelector('.sp-gallery-thumbs li.active').classList.remove('active');
          document.querySelectorAll('.sp-gallery-thumbs li')[matchedVariant.featured_image.position - 1].classList.add('active');
        }

        // change button
        var addToCartBtn = document.querySelector('#addToCartBtn');
        var buyItNowBtn = document.querySelector('#buyItNowBtn');

        if (matchedVariant.available) {
          // set add to cart button text
          addToCartBtn.textContent = 'Add to Cart';
          buyItNowBtn.classList.remove('hidden');

          // enable form fields 
          document.querySelectorAll('.js-disable-field').forEach(input => {
            input.disabled = false;
          });

          document.querySelectorAll('.sp-option input[type="radio"]:checked').forEach(radio => {
          selectedOptions.push(radio.value)
        });
        } else {
          // set add to cart button text
          addToCartBtn.textContent = 'Sold Out';
          buyItNowBtn.classList.add('hidden');

          // disable form fields
          document.querySelectorAll('.js-disable-field').forEach(input => {
            input.disabled = true;
          });
        }

        // buy it now
        buyItNowBtn.addEventListener('click', (e) => {
          e.preventDefault();

          var form = document.querySelector('.shopify-product-form');

          var input = document.createElement('input');
          input.value = '/checkout';
          input.type = 'hidden';
          input.name = 'return_to';

          form.appendChild(input);

          form.submit();

        });
      });
    });
  })
  .catch(error => {
    console.error('Error fetching product data:', error);
  });
};

var bindGalleryControls = function() {
  document.querySelectorAll('.sp-gallery-thumbs li').forEach(li => {
    li.addEventListener('click', () => {
      document.querySelector('.sp-gallery-thumbs li.active').classList.remove('active');
      li.classList.add('active');

      document.querySelector('#productImage').src = li.querySelector('img').getAttribute('src');
    });
  });
};

var bindCartControls = function() {
  // cart-quantity-sector
  document.querySelectorAll('.cart-quantity-sector button').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault(); // weird bug removes the item from cart when you interact with default

      const input = button.parentElement.querySelector('input');
      const value = Number(input.value);
      const isPlus = button.classList.contains('js-plus');
      const key = button.closest('.cart-item').getAttribute('data-key');
      
      if (isPlus) {
        const newValue = value + 1;
        input.value = newValue;
        changeItemQuantity(key, newValue);
      } else if (value > 1) {
        const newValue = value - 1;
        input.value = newValue;
        changeItemQuantity(key, newValue);
      }
    });
  });

  document.querySelectorAll('.js-remove-cart-item').forEach(remove => {
    remove.addEventListener('click', (e) => {
      e.preventDefault();

      const item = remove.closest('.cart-item');
      const key = item.getAttribute('data-key')

      axios.post('/cart/change.js', {
        id: key,
        quantity: 0
      })
      .then((res) => {
        console.log(res.data);

        if (res.data.items.length === 0) {
          document.querySelector('#cart_form').remove();
          var html = document.createElement('h4');
          html.innerHTML = 'Your Cart is empty';
          document.querySelector('.cart').appendChild(html);
        } else {
          item.remove();

          // update totals
          const totalDiscount = res.data.total_discount;
          const totalPrice = res.data.total_price;
          const format = document.querySelector('[data-moneyformat]').getAttribute('data-moneyformat');
          document.querySelector('#cartTotalDiscount').textContent = formatMoney(totalDiscount, format);
          document.querySelector('#cartTotalPrice').textContent = formatMoney(totalPrice, format);
          console.log('.discount',totalDiscount);

          if (totalDiscount === 0) {
            document.querySelector('#cartTotalDiscount').parentElement.classList.add('hidden');
          }
        }
      });
    });
  });

  document.querySelector('[name="note"]').addEventListener('keyup', debounce((e) => {
    // console.log(e.target.value);
    axios.post('/cart/update.js', {
      note: e.target.value,
    });
  }, 500));
}

function changeItemQuantity(key, quantity) {
  // console.log(quantity, key);

  axios.post('/cart/change.js', {
    id: key,
    quantity
  })
  .then((res) => {
    // console.log(res.data);
    const totalDiscount = res.data.total_discount;
    const totalPrice = res.data.total_price;
    const item = res.data.items.find(item => item.key === key);
    const itemPrice = item.final_line_price;
    const format = document.querySelector('[data-moneyformat]').getAttribute('data-moneyformat');

    document.querySelector('#cartTotalDiscount').textContent = formatMoney(totalDiscount, format);

    document.querySelector('#cartTotalPrice').textContent = formatMoney(totalPrice, format);
    document.querySelector('[data-key="'+key+'"] .cart-price').textContent = formatMoney(itemPrice, format);
  });
}


/* ********************************
 * Utility Functions
 * ******************************** */
// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
var formatMoney = function(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};

// David Walsh debounce: https://davidwalsh.name/javascript-debounce-function
function debounce(func, wait, immediate) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
};