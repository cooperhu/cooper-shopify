/* *********************************************************
 * Add all site functions here 
 * and add them to both the scripts.js and editor.js files
 * - Only init barba on front-end script (not editor.js)
 *   so be sure to add any new functionality to both files
 * ********************************************************* */

// Sitewide Init Functions
initCartDrawer();
initNavigation();

/* ***********************
 * Sitewide Functions
 * *********************** */
function initNavigation() {
  // Enable sticky nav
  if (document.querySelector('.site-header').classList.contains('is-sticky')) {
    ScrollTrigger.create({
      trigger: ".site-header",
      pin: ".site-header",
      start: "top",
      end: 99999,
      // markers: true,
    });
  }
}

function initCartDrawer() {
  // Opens Cart
  document.querySelector('.js-open-cart').addEventListener('click', function(e) {
    e.preventDefault();
    gsap.to('.cart-drawer', 0.35, {autoAlpha: 1, opacity: 1});
  });

  // Closes Cart
  document.querySelector('.js-close-cart').addEventListener('click', function(e) {
    e.preventDefault();
    gsap.to('.cart-drawer', 0.35, {autoAlpha: 0, opacity: 0});
  });

  // Removes item from cart drawer list (WIP)
}



// Allows WP Links to operate normally
// document.querySelectorAll("#wpadminbar a").forEach(item=>item.setAttribute('data-barba-prevent','self'));




/* ********************************
 * Pagewide Init Functions
 * ******************************** */
function initSingleProduct() {
  console.log('on product page');
  // controls for quantity sliders
  bindQuantityCount();
  bindVariantOptions();
}

function initCartPage() {
  console.log('on cart page');
  // controls for quantity sliders
  bindQuantityCount();
  bindVariantOptions();
}

function initContactPage() {
  console.log('on contact page');
}

function initCollectionPage() {
  console.log('on collection page');

  Shopify.queryParams = {};

  // Preserve existing query parameters
  if (location.search.length) {
      var params = location.search.substr(1).split('&');

      for (var i = 0; i < params.length; i++) {
        var keyValue = params[i].split('=');

        if (keyValue.length) {
          Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
        }
      }
  }

  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;

    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
}

/* ********************************
 * Single Purpose Functions
 * ******************************** */
function bindQuantityCount() {
    console.log('bindQuantityCount');
    const addButtons = document.querySelectorAll('.js-add');
    addButtons.forEach(function (addButton) {
      addButton.addEventListener('click', function () {
        const th = this.closest('.sp-option').querySelector('.quantity__input');
        th.value = parseInt(th.value) + 1;
      });
    });

    const subButtons = document.querySelectorAll('.js-sub');
    subButtons.forEach(function (subButton) {
      subButton.addEventListener('click', function () {
        const th = this.closest('.sp-option').querySelector('.quantity__input');
        if (parseInt(th.value) > 1) th.value = parseInt(th.value) - 1;
      });
    });
}

function bindVariantOptions() {
  var productURL = $('.single-product').data('product-url');

  fetch(productURL + '.js')
  .then(response => response.json())
  .then(product => {
    // Your code that uses the product data goes here
    console.log(product);

    document.querySelectorAll('.sp-option input[type="radio"]').forEach(radio => {
      radio.addEventListener('change', () => {
        // find selected options
        var selectedOptions = [];

        document.querySelectorAll('.sp-option input[type="radio"]:checked').forEach(radio => {
          selectedOptions.push(radio.value)
        });

        // finding matched variant
        var matchedVariant = product.variants.find(variant => {
          var pass = true;

          for (var i = 0; i < selectedOptions.length; i++) {
            if (selectedOptions.indexOf(variant.options[i]) === -1) {
              pass = false;
              break;
            }
          }

          return pass;
        })

        console.log(matchedVariant);

        // change hidden input
        document.querySelector('#productId').value = matchedVariant.id;

        // change url
        var url = new URLParse(window.location.href, true);
        url.query.variant = matchedVariant.id;
        window.history.replaceState(null, null, url.toString());
        // url.toString();
        // console.log(url.toString());
      });
    });
  })
  .catch(error => {
    console.error('Error fetching product data:', error);
  });
}